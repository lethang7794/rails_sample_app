// Save old vote value for animation
var old_vote_value = $("#micropost-<%= @micropost.id %>-vote-value").html();

// Replace upvote form with unvote form
var $vote_container = $("#micropost-<%= @micropost.id %>-vote-container");
$vote_container.html("<%= escape_javascript(
  render partial: 'shared/micropost/info_bar/upvote_form', locals: { micropost: @micropost }
) %>");

// Heart fade out
var $vote_button_svg_path_auxiliary = $("#micropost-<%= @micropost.id %>-vote-button-wrapper").find(".auxiliary");
$vote_button_svg_path_auxiliary.removeClass("fill-transparent");

// Disable all stat container buttons
var $form_buttons = $( ".stat-container form > button" );
$form_buttons.attr("disabled", true);

var $vote_value_wrapper = $("#micropost-<%= @micropost.id %>-vote-value-wrapper");

// Hide new vote value to avoid overlap with old value before move it up/down
var $new_vote_value = $("#micropost-<%= @micropost.id %>-vote-value").css("visibility", "hidden");

// Position: absolute --> Overlap old/new value
var $old_vote_value = $new_vote_value.clone().addClass("pos-abs");

// Unvote --> Old vote value is always not 0 --> Show
$old_vote_value.css("visibility", "visible");

// Move new vote value up at once
$new_vote_value.removeClass("tran-03s").addClass("move-up tran-0s");

// Show new vote value if not equals 0
var new_vote_value = $new_vote_value.html();
if (new_vote_value > 0) $new_vote_value.css("visibility", "visible");

$old_vote_value.html(old_vote_value);
$old_vote_value.prependTo($vote_value_wrapper);

setTimeout(function () {
  $old_vote_value.addClass( "move-down" );
  $new_vote_value.removeClass("move-up tran-0s").addClass("tran-03s");
  $vote_button_svg_path_auxiliary.addClass("fill-transparent");
}, 1); // Use delay to not override transform, and cause no transition

$old_vote_value.on('animationcancel', function(){
  $(this).remove();
});

setTimeout(function () {
  $old_vote_value.remove();
  $form_buttons.attr("disabled", false); // Re-enable all stat container buttons
}, 301);
